

class Node{
    constructor(data){
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}


class DoublyLinkedList{
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0;
        

    }
    push(val){
        const current = new Node(val)
        if(this.head === null){
            this.head = current;
            this.tail = current;
            
        }else{
            this.tail.next = current;
            current.prev = this.tail;
            this.tail = current;

        }
        this.length++;
        return this
      
    }
    pop(){
        if(this.length <= 0){
            return undefined;
        }
        if(this.length === 1){
            this.head = null;
            this.tail = null;
            return this
        }
        const current = this.tail.prev;
        this.tail.prev = null;
        current.next = null;
        this.tail = current;
        this.length--;

        return this

    }
    shift(){
        if(this.length <= 0) return undefined;

        if(this.length === 1){
            this.head = null;
            this.tail = null;
            this.length--;
            return this;
        }

        let temp = this.head;
        this.head = temp.next;
        temp.next = null;
        this.head.prev = null;
        this.length--;
        return temp;
    }
    unshitf(val){
        if(this.length === 0){
            return push(val)
        }
        let newHead = new Node(val);
        newHead.next = this.head;
        this.head.prev = newHead;
        this.head = newHead;
        this.length++;
        return newHead;
    }
    get(index){
        
        if(index < 0 || index >= this.length) return null;
        let half = Math.floor(this.length / 2)
         let count = 0;
            let current = this.head;
            
        if( index <= half){
           
            while(count != index){
                current = current.next;
                count++
            }
           return current;
        } else{
            let current = this.tail
            while(count != index - half){
                current = current.prev;
                count++;   
            }
            return current;
            
        }
        
    }
    set(index, value){
        const node = this.get(index);
        if(!node){return false}
        node.data = value;
        return true;
    }
  
    insert(index,val){
        if(index < 0 || index > this.length) return false;
        if(index === 0){
            return !!this.unshitf(val)
        }
        if(index === this.length){
            return !!this.push(val)
        }
        let newNode = new Node(val);
        let insertNode = this.get(index - 1);
        
        let temp = insertNode.next;
        insertNode.next = newNode;
        newNode.next = temp;
        newNode.prev = insertNode;
        this.length++;
        return true;
    }
    remove(index){
        if(index > this.length || index < 0) return false;

        if(index === 0) return this.shift();
        if(index === this.length) return this.pop();
        
        let removeNode = this.get(index);
        let beforeNode = removeNode.prev;
        let afterNode = removeNode.next;
        
        beforeNode.next = afterNode;
        afterNode.prev = beforeNode;
        removeNode.next = null;
        removeNode.prev = null;

     this.length--;
        return removeNode;
        
    }
    
    reverse(){}
}

const first = new DoublyLinkedList();
